// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management & Security
model User {
  id                String         @id @default(cuid())
  name             String?
  email            String?        @unique
  emailVerified    DateTime?
  mobile           String?        @unique
  mobileVerified   DateTime?
  password         String?
  image            String?
  status           UserStatus     @default(ACTIVE)
  role             UserRole       @default(USER)
  lastLoginAt      DateTime?
  lastLoginDevice  String?
  deviceTokens     DeviceToken[]  // For push notifications
  twoFactorEnabled Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  // Security & Authentication
  accounts         Account[]
  sessions        Session[]
  verifications   Verification[]
  securityLogs    SecurityLog[]
  
  // App Data
  settings        UserSettings?
  expenses        Expense[]
  categories      Category[]
  budgets         Budget[]
  recurringExpenses RecurringExpense[]
  tags            Tag[]
  
  // Backup & Sync
  lastSyncAt      DateTime?
  dataVersion     Int            @default(1)
}

model DeviceToken {
  id          String    @id @default(cuid())
  userId      String
  token       String    @unique
  deviceId    String
  deviceType  DeviceType
  isActive    Boolean   @default(true)
  lastUsedAt  DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, deviceId])
}

model SecurityLog {
  id          String    @id @default(cuid())
  userId      String
  action      SecurityAction
  ipAddress   String?
  deviceInfo  String?
  location    String?
  status      SecurityStatus
  details     Json?
  createdAt   DateTime  @default(now())

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Authentication & Sessions
model Account {
  id                String    @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token         String?   @db.Text
  session_state    String?

  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  deviceInfo   String?
  ipAddress    String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id         String    @id @default(cuid())
  userId     String
  token      String    @unique
  type       VerificationType
  expires    DateTime
  attempts   Int       @default(0)
  verified   Boolean   @default(false)
  createdAt  DateTime  @default(now())

  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Core Expense Tracking
model Expense {
  id          String    @id @default(cuid())
  userId      String
  amount      Float
  description String
  date        DateTime
  categoryId  String
  notes       String?   @db.Text
  location    Json?     // Geolocation data
  receiptUrl  String?
  status      ExpenseStatus @default(COMPLETED)
  syncStatus  SyncStatus   @default(SYNCED)
  isDeleted   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  // Relationships
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    Category  @relation(fields: [categoryId], references: [id])
  tags        TagsOnExpenses[]
  attachments Attachment[]
}

model RecurringExpense {
  id          String    @id @default(cuid())
  userId      String
  amount      Float
  description String
  categoryId  String
  frequency   RecurringFrequency
  startDate   DateTime
  endDate     DateTime?
  lastProcessed DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id          String    @id @default(cuid())
  name        String
  color       String
  icon        String?
  type        CategoryType @default(CUSTOM)
  userId      String?
  isDefault   Boolean   @default(false)
  isDeleted   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User?     @relation(fields: [userId], references: [id])
  expenses    Expense[]
  budgets     Budget[]
}

model Budget {
  id          String    @id @default(cuid())
  userId      String
  categoryId  String
  amount      Float
  period      BudgetPeriod
  startDate   DateTime
  endDate     DateTime?
  rollover    Boolean   @default(false)
  alerts      Boolean   @default(true)
  alertThreshold Float  @default(0.8) // Alert at 80% of budget
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    Category  @relation(fields: [categoryId], references: [id])
}

model Tag {
  id        String    @id @default(cuid())
  userId    String
  name      String
  expenses  TagsOnExpenses[]
  
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
}

model TagsOnExpenses {
  expenseId String
  tagId     String
  expense   Expense   @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  tag       Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([expenseId, tagId])
}

model Attachment {
  id        String    @id @default(cuid())
  expenseId String
  type      AttachmentType
  url       String
  thumbnail String?
  size      Int
  mimeType  String
  createdAt DateTime  @default(now())

  expense   Expense   @relation(fields: [expenseId], references: [id], onDelete: Cascade)
}

model UserSettings {
  id                    String    @id @default(cuid())
  userId               String    @unique
  currency             String    @default("USD")
  theme                String    @default("light")
  language             String    @default("en")
  timezone             String    @default("UTC")
  notificationSettings Json      // Detailed notification preferences
  privacySettings      Json      // Privacy preferences
  defaultView          String    @default("monthly")
  weekStartDay         Int       @default(0) // 0 = Sunday
  dateFormat          String    @default("MM/DD/YYYY")
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Enums
enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}

enum UserRole {
  USER
  ADMIN
  PREMIUM
}

enum DeviceType {
  IOS
  ANDROID
  WEB
}

enum SecurityAction {
  LOGIN
  LOGOUT
  PASSWORD_CHANGE
  EMAIL_CHANGE
  MOBILE_CHANGE
  TWO_FACTOR_ENABLE
  TWO_FACTOR_DISABLE
  DEVICE_ADDED
  DEVICE_REMOVED
}

enum SecurityStatus {
  SUCCESS
  FAILURE
  BLOCKED
}

enum VerificationType {
  EMAIL
  MOBILE
  PASSWORD_RESET
  TWO_FACTOR
}

enum ExpenseStatus {
  PENDING
  COMPLETED
  CANCELLED
  RECURRING
}

enum SyncStatus {
  PENDING
  SYNCED
  FAILED
}

enum CategoryType {
  DEFAULT
  CUSTOM
}

enum BudgetPeriod {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum RecurringFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum AttachmentType {
  RECEIPT
  INVOICE
  WARRANTY
  OTHER
}
